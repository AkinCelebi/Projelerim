# Bilinmesi Gereken Temel Komutlar
  ## "git init"   ilk kez proje oluştururken kullandık.
  ## "git add "   <file>
  ## "git add " . (all)
  ## "git commit -m 'açıklama'"
  ## "git status"
  ## "git diff " 
  ## "git checkout branchname"
  ## "git push"
  ## "git clone"
  ## "git commit --amend"
  ## "git revert <commitID>"
  ## "git log"
  ## "git log -n"
  ## "git reset --hard"

### git init -- ilk defa projeleri oluştururken kullandigimiz komutumuz

### git add -- Herhangi bir dosyayi veya herhangi bir klasörü versiyon kontrol sistemi için, takip için ekleyebiliyoruz.

### git commit -- SnapShot almak için kullandigimiz bunu onaylamak için kullandigimiz yapi. 
### **:q yaptigimizda commitimizi iptal ediyoruz.

### "git commit --amend" komutu ile son commit yaptığımız dosya içerisindeki değişikliği, yeni commit oluşturmadan son commite eklemek.

### "git commit --amend -m 'bu amend ile eklenmiş yeni bir mesaj'" bu komut ile commitin mesajını değiştirmiş oluruz.

### git log --  Projedeki commit geçmişini görünlememizi saglar. Bütün commitler, idsi, yazari , tarihi ve mesaki ile beraber listelenir.
### git log -n <1,2,3,4,5,> en üstteki 1. 2. 3.'yü bana getir anlamına geliyor.

### git revert <commitID> git revert komutu commiti silmek için kullanılır. git log ile commitin id sinin baştan en az 7 olacak şekilde yazdığımızda o committeki değişikliği geri alacaktır. ### Revert komutuda revert edilebilir.

### git reset --hard <commitID> komutu belirttiğimiz commitıd sine geri dönüş yapacak sonraki commitleri göstermeyecektir. Örnek olarak revert commitlerini silmek.

### git diff -- En son alinan commit SnapShot işleminden sonraki tüm degişiklikleri gösterecektir.
### "git diff <commitID1>..<commitID2> <dosya adı>" bu komut bize idsi yazılmış olan iki commit arasındaki yapılan değişiklikleri gösterir.


### git status -- Üzerinde çalişilan projenin o anki durumu hakkinda bilgi verir. Yapilan degişiklikler, eklenen ve silinen dosyalar gibi bilgiler listelenir.


### git rm --cached <dosya adi> -- dosyalari veya klasörleri silmek için kullanilan yapi.

### git add -A --  tüm degişiklikleri staged (hazir) durumuna getirir ve bir sonraki commite dahil etmek için işaretler.

### git add . --  komutu ile tüm dosyaları tek seferde ekleyebiliyoruz. ( untrack olanlar dahil)


### U = untrack, takip edilmeyen anlamina geliyor.
### M = Modified bu harf dosyanin degiştigini ifade ediyor.

### git checkout -- projelerinizin içerisinde birden fazla yapi çalişiyorsa bunlar arasinda geçiş yapabiliyoruz.,

### git branch -- Local ve ya rm repository üzerinde yeni bir branch (dal) eklemek, silmek veya listelemek için kullanilir. git branch <branch_name>

### git merge --Başka bir branchda olan degişiklikleri, bulundugumuz branch ile birleştirmek istedigimizde kullanilir.

### git remote add <name> <url> --Bir uzak depo eklemek için kullanılır
### "git remote" -v -- veya-- "git remote" --verbose: Mevcut uzak depoların listesini ve URL'lerini görüntüler.

### git push uzak bilgisayara , sunucuya gönder.

### git pull -- uzak bilgisayardan git ve bu proje klasörünü çek geri getir.

### git clone -- projenin kopyasini alabilmemiz için kullanilan yapi


Yazilim dehasi Bill Gates çok kitap okuyan, okuduklarini iyi şekilde hatirlayan ve konuşmalari sirasinda okudugu kitaplardan alintilar yapan bir şahsiyet. Bu kadar okuma yapip da okuduklarini aklinda detayli şekilde nasil tuttugu soruldugunda Bill Gates;
Bir konuda okumaya başlamadan önce konu hakkinda genel bilgi sahibi olmayi ve konunun tarihini incelemeyi öneriyor.

Git sözlük anlami Aptal Aşagilik Basit. Linuxun mimari linus Torvadls linux çekirdegini geliştirirken projenin yönetimi için o dönem piyasada bulunan BitKeeper adindaki versiyon kontrol sismini tercih etmiş falan Bitkeeper in telif haklarini elinde tutan kişi ile yaşanan yasal sorunlardan ötürü bu kullanimdan vazgeçip kendi ihtiyaçlarina çözüm için kendi versiyon kontrol sismini yazmaya başlamiştir.ilk olarak 2005 yilinda piyasaya sürüldü. 

Git bir versiyon kontrol sistemidir. Versiyon kontrol sistemi, bir döküman üzerinde yaptiginiz degişiklikleri adim adim izleyen, istediginizde kayit eden ve isterseniz bunu internet üzerindeki bir bilgisayar veya yerel bir cihazda ( respository /repo / depo) saklamanizi ve yönetmenizi saglayan bir sistemdir.
 
  Git bize ne saglar
   birden fazla yerde dosyalarinizi ve versiyon kontrol bilgilerinizi depolayabilirsiniz. Böylelikle cihazdan bagimsiz olarak dosyalariniza erişebilirsiniz.
   " Commit " yaparak SnapShot (anlik görüntü) özelligi ile istediginiz zaman proje veya dosyalarin o anki halini kayit altina alabilirsiniz. Böylelikle ileride bir haya ile karşilaşirsaniz herhangi bir zamandaki herhangi bir versiyona dönüş yapabilirsiniz.
   SnapShot aldiktan sonra degişiklik yapilan dosyalari görebilirsiniz.
   Takimlarin ayni proje içerisinde beraber çalişmalarina imkan verir. 
   Kim neyi düzenledi?
   Ne ekledi?
   Ne çikartti? 
   Son degişiklik ne zaman yapildi? gibi bilgilere erişebilirsiniz. Bu sayede topluluk proje geliştirme süreçlerini kolaylaştirabilirsiniz.
   Projede versiyonlanmasini istemediginiz dosyalari belirtebilirsiniz. (nude_modules, .mp4 ,log ,env gibi)
        GIT i Anladim Fakat GitHub, GitLab, BitBucket Nedir?
        *** En sade şekilde GIT version kontrol sistemini kulannan depolama servisleri diyebiliriz.***
   GitHub 

   Yazilimcilar için bir kod kütüphanesi ve bir çeşit sosyal medya ortamidir.
   Yazilim geliştiriciler projelerini halka açik veya özel olarak saklayabilir. Ücretli ve ücretsizdir.
   GitLab 

   GitHub gibi bir GIT servisidir. Farkli oalrak firmalara GitLab i kendi sunucularina kurma imkani verildgi için genelde kurumsal tarafta kullanilir. GitLab ile firmalar kendi içerisinde GIT hizmetinden faydalanabilir.
   BitBucket

   Genelde kişisel kullanima yöneliktir. GitHub tarafindaki açik kaynak projeler ve sosyal medya ortami burada gelişmemiştir.





Projelerin hepsini version kontrol sistemine eklemek istemeyebiliriz.

Aşagidakileri versiyonlamak istemem.
  görseller
  videolar
  logolar
  paket yöneticisi ile kurulmuş dosyalar
 Bu tarz dosyalar yer kapladigi için versiyon kontrol sisteminde tutmak istemeyiz. Bu tarz dosyalar projeye sonradan eklenebilecek dosyalardir.
    .gitignore dosyasi oluşturduktan sonra versiyon kontrol sisteminin bakmasini istemedigimiz yapilari burada tutabiliyoruz.
    